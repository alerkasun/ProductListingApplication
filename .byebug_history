c
expect{ Product.create! }.to raise_error(ActiveRecord::ArgumentError)
Product.create!
expect{ Product.create! name: "wer" }.to raise_error(ActiveRecord::RecordInvalid, "Price is not a number, Price can't be blank")
exit
        expect{ Product.create! name: "wer" }.to raise_error(ActiveRecord::RecordInvalid)
Product.create! name: "wer" 
expect{ Product.create! name: "wer" }.to raise_error(ActiveRecord::ArgumentError)
c
expect{ Product.create! name: "wer" }.to raise_error(ActiveRecord::RecordInvalid)
        expect{ Product.create! name: "wer" }.to raise_error(ActiveRecord::RecordInvalid)
Product.create! name: "wer"
expect(JSON.parse(response.body)["errors"]).to eq("is not a number")
expect(JSON.parse(response.body)["errors"])
expect(JSON.parse(response.body)["message"])
expect(JSON.parse(response.body)["message"]).to eq("is not a number")
expect(JSON.parse(response.body)["errors"])
expect(JSON.parse(response.body)["message"])
JSON.parse(response.body)
JSON.parse(response.body)['errors']
JSON.parse(response.body).errors
JSON.parse(response.body)
expect(JSON.parse(response.body)["message"]).to eq("ERROR: This is the specific error message")
response.body.to include('number')
response.bodyto include('number')
response.body
response.body['data']
response.body['data'].keys
response_body['data'].keys
response.body
response.status
status
c
body
